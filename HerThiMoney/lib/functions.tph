// To remove snippets of code in a safe way
DEFINE_PATCH_FUNCTION GET_SCRIPT_BLOCK
INT_VAR
  start_offset  = 0
  reverse       = 0
STR_VAR
  search_regexp = ~~
RET
  script_block
  start_offset
  end_offset
BEGIN
  SET offset = start_offset
  PATCH_IF (offset < 0) BEGIN SET offset = 0 END
  PATCH_IF (offset > BUFFER_LENGTH) BEGIN SET offset = BUFFER_LENGTH END

  TEXT_SPRINT script_block ~~
  SET start_offset = "-1"
  SET end_offset = "-1"

  PATCH_IF (NOT ~%search_regexp%~ STR_EQ ~~) BEGIN
    PATCH_IF (reverse) BEGIN
      SET offset = RINDEX_BUFFER(~%search_regexp%~ offset)
    END ELSE BEGIN
      SET offset = INDEX_BUFFER(~%search_regexp%~ offset)
    END

    PATCH_IF (offset >= 0) BEGIN
      SET ofsStart = RINDEX_BUFFER(~^IF$~ offset)
      PATCH_IF (ofsStart >= 0) BEGIN
        SET ofsEnd = INDEX_BUFFER(~^END$~ offset)
        PATCH_IF (ofsEnd >= 0) BEGIN
          SET ofsEnd += 3
          READ_ASCII ofsStart script_block (ofsEnd - ofsStart)
          SET start_offset = ofsStart
          SET end_offset = ofsEnd
        END
      END
    END
  END
END

// To add replicas in difficult situations

DEFINE_ACTION_FUNCTION FC_COMPILE_EXTERNAL_DLG
	INT_VAR
		lbl  = "-1"
		nlbl = "-1"
	STR_VAR
		dlg_patch = ""
		dlg_orig  = ""
		string    = ""
BEGIN
<<<<<<<< inl_dlg.d
ALTER_TRANS %dlg_patch%
BEGIN %nlbl% END BEGIN 0 END BEGIN "EPILOGUE" ~EXTERN %dlg_orig% XXX1~ END

CHAIN
IF ~~ THEN %dlg_orig% XXX1
  ~%string%~
END %dlg_orig% %lbl%
>>>>>>>>
	COMPILE ~inl_dlg.d~ EVALUATE_BUFFER
END

DEFINE_ACTION_FUNCTION FC_APPEND_TO_DLGS
	INT_VAR
		state_to_patch = "-1"
	STR_VAR
		dlg = ""
		str = ""
BEGIN
	ACTION_CLEAR_ARRAY STATE_LABEL_ARRAY
	ACTION_IF FILE_EXISTS_IN_GAME ~%dlg%.dlg~ BEGIN
		COPY_EXISTING ~%dlg%.dlg~ ~override~
			READ_LONG 0x08 state_num
			READ_LONG 0x0c state_off
			SET  n_state = "-1"
			PATCH_IF ( state_num > %state_to_patch% ) BEGIN
				SET offset = state_off + ~%state_to_patch%~ * 0x10
				READ_LONG offset + 0x4 resp_fst
				READ_LONG offset + 0x8 resp_cnt
				READ_LONG 0x10         resp_num
				READ_LONG 0x14         resp_off
				SET       resp_all =   resp_fst + resp_cnt
				PATCH_IF  ( resp_num >= resp_all ) BEGIN
					FOR ( i = resp_fst ; i < resp_all ; ++i ) BEGIN
						SET off2 = resp_off + i * 0x20
						READ_ASCII off2 + 0x14 d_name (8) NULL
						READ_LONG  off2 + 0x1c idx
						PATCH_IF ( n_state < 0 ) BEGIN
							SET n_state = idx
							SET idx = state_to_patch
						END
						DEFINE_ASSOCIATIVE_ARRAY STATE_LABEL_ARRAY BEGIN
							~%dlg%~, ~%d_name%~, ~%str%~, ~%n_state%~, ~%idx%~ => ~~
						END
					END
				END
			END
			BUT_ONLY_IF_IT_CHANGES
		ACTION_PHP_EACH STATE_LABEL_ARRAY AS slb => _ BEGIN
			LAF FC_COMPILE_EXTERNAL_DLG
				INT_VAR
					lbl       = "%slb_3%"
					nlbl      = "%slb_4%"
				STR_VAR
					dlg_patch = EVAL "%slb_1%"
					dlg_orig  = EVAL "%slb%"
					string    = EVAL "%slb_2%"
			END
		END
	END
END

// Statues in Trademeet
DEFINE_PATCH_FUNCTION GET_BIT
INT_VAR
	number = 0
	nth_bit = 0
RET
	bit_value
BEGIN
	SET bit_value = (number >> nth_bit) & 1
END

DEFINE_ACTION_FUNCTION CREATE_B_BCS_NAME
	INT_VAR
		mx_lng = 8
	STR_VAR
		namez  = ""
		prefix = ""
		suffix = ""
	RET
		result
BEGIN
	OUTER_SPRINT ~result~ ~%prefix%%namez%~
	OUTER_SET lng  = STRING_LENGTH ~%result%~
	OUTER_SET lngs = STRING_LENGTH ~%suffix%~
	ACTION_IF ( lng > mx_lng ) BEGIN OUTER_SNPRINT mx_lng ~result~ ~%result%~ END
	ACTION_IF ( lngs > 0 ) BEGIN
		OUTER_SET zzz = mx_lng - lngs
		OUTER_SNPRINT zzz ~result~ ~%result%~
		OUTER_SPRINT ~result~ ~%result%%suffix%~
	END
END


// For new locations in EE - check if there are already pvrz files with the same name so that there are no conflicts with other mods
DEFINE_ACTION_FUNCTION FC_COPY_TIS_PVRZ
	INT_VAR
		delete_original=0 // 1 - delete original pvrz
	STR_VAR
		tis_pvrz_path = ""
		path_to_vanilla_tis = "" // using if Not find free pvrz index
		tis_name = "" // original tis-name
		tis_name_target = "" // target tis-name. if tis_name_target = "" => tis_name_target = tis_name
		target_path = "override"
BEGIN
	ACTION_IF ( ~%tis_name_target%~ STR_EQ ~~ ) BEGIN OUTER_SPRINT tis_name_target ~%tis_name%~ END
	
	ACTION_CLEAR_ARRAY FC_PVRZ_PAGE_ARRAY
	ACTION_CLEAR_ARRAY FC_OFFSET_ARRAY
	
	OUTER_PATCH_SAVE pvr_name_old ~%tis_name%~ BEGIN
		DELETE_BYTES 1 1
	END
	OUTER_PATCH_SAVE pvr_name ~%tis_name_target%~ BEGIN
		DELETE_BYTES 1 1
	END
	
	OUTER_SET original = 0
	
	ACTION_IF ( FILE_EXISTS ~%tis_pvrz_path%/%tis_name%.tis~ ) BEGIN
		COPY ~%tis_pvrz_path%/%tis_name%.tis~ ~%target_path%/%tis_name_target%.tis~
			READ_LONG 0x8  "tiles_cnt"
			READ_LONG 0x10 "tiles_off"
			READ_LONG 0xc  "tiles_length"
			SET x = 0
			SET z = 0
			FOR ( i = 0 ; i < tiles_cnt ; ++i ) BEGIN
				SET offset = tiles_off + tiles_length * i
				READ_LONG offset pvr_pg
				DEFINE_ASSOCIATIVE_ARRAY FC_OFFSET_ARRAY BEGIN ~%offset%~ => ~%pvr_pg%~ END
				PATCH_IF !( VARIABLE_IS_SET $FC_PVRZ_PAGE_ARRAY( ~%pvr_pg%~ ) ) BEGIN
					PATCH_IF ( pvr_pg < 10 ) BEGIN SPRINT pgi ~0%pvr_pg%~ END ELSE BEGIN SPRINT pgi ~%pvr_pg%~ END
					PATCH_IF ( NOT FILE_EXISTS_IN_GAME ~%pvr_name%%pgi%.PVRZ~ ) BEGIN
						SET z = pvr_pg
						DEFINE_ASSOCIATIVE_ARRAY FC_PVRZ_PAGE_ARRAY BEGIN ~%pvr_pg%~ => ~%z%~    END
					END ELSE BEGIN
						SET z = z + 1
						FOR ( j = z ; j < 100 ; ++j ) BEGIN
							PATCH_IF ( z < 10 ) BEGIN SPRINT pgi ~0%z%~ END ELSE BEGIN SPRINT pgi ~%z%~ END
							PATCH_IF ( NOT FILE_EXISTS_IN_GAME ~%pvr_name%%pgi%.PVRZ~ ) BEGIN
								DEFINE_ASSOCIATIVE_ARRAY FC_PVRZ_PAGE_ARRAY BEGIN ~%pvr_pg%~ => ~%j%~    END
								SET j = 100
							END ELSE BEGIN
								SET z = z + 1
							END
						END
					END
				END
			END
			PATCH_IF ( z > 99 ) BEGIN SET original = 1 END
			PHP_EACH FC_OFFSET_ARRAY AS offset => value BEGIN
				SET new_value = 0
				PATCH_IF ( VARIABLE_IS_SET $FC_PVRZ_PAGE_ARRAY( ~%value%~ ) ) BEGIN
					SET new_value = $FC_PVRZ_PAGE_ARRAY( ~%value%~ )
				END
				WRITE_LONG ~%offset%~ ~%new_value%~
			END

		ACTION_IF ( NOT original ) BEGIN
			ACTION_PHP_EACH FC_PVRZ_PAGE_ARRAY AS source => dest BEGIN
				ACTION_IF ( source < 10 ) BEGIN OUTER_SPRINT sourceX ~0%source%~ END ELSE BEGIN OUTER_SPRINT sourceX ~%source%~ END
				ACTION_IF ( dest   < 10 ) BEGIN OUTER_SPRINT destX   ~0%dest%~   END ELSE BEGIN OUTER_SPRINT destX   ~%dest%~   END
				ACTION_IF ( FILE_EXISTS ~%tis_pvrz_path%/%pvr_name_old%%sourceX%.PVRZ~ ) BEGIN
					PRINT ~%pvr_name_old%%sourceX%.PVRZ => %target_path%/%pvr_name%%destX%.PVRZ~
					SILENT
						COPY ~%tis_pvrz_path%/%pvr_name_old%%sourceX%.PVRZ~ ~%target_path%/%pvr_name%%destX%.PVRZ~
						ACTION_IF ( delete_original ) BEGIN
							DELETE ~%tis_pvrz_path%/%pvr_name_old%%sourceX%.PVRZ~
						END
					VERBOSE
				END
			END
		END ELSE BEGIN
			PRINT ~Not find free PVRZ index...~
			ACTION_IF ( ~%path_to_vanilla_tis%~ STR_CMP ~~ ) BEGIN
				ACTION_IF ( FILE_EXISTS ~%path_to_vanilla_tis%/%tis_name%.tis~ ) BEGIN
					PRINT ~Using vanilla TIS...~
					COPY ~%path_to_vanilla_tis%/%tis_name%.tis~ ~%target_path%/%tis_name_target%.tis~
				END
			END
		END
	END
END

/* Патчим файл player1, чтобы добавить диалоги всем NPC после превращения игрока в Убийцу (ранее говорил только кто-то один), подключаем функцию*/
OUTER_SET minus_one = ( 0 - 1 )
OUTER_SPRINT tilde "~"
OUTER_SET new_added_string = RESOLVE_STR_REF ( ~...~ )
DEFINE_ACTION_FUNCTION GET_EDIT_STATE
	INT_VAR
		detect_state = 1
		add_empty_block = 1
		addedx = 0
		clear = 1
		aablock = 0
	STR_VAR
		found_file   = ""
	RET
		string
		addedx
		aablock
	RET_ARRAY
		STATES_IN_DLG
BEGIN
	OUTER_SET added = 0
	OUTER_SPRINT string ~~
	OUTER_SPRINT action_text ~~
	OUTER_SPRINT new_blocks ~CHAIN
IF %tilde%%tilde% THEN %tilde%%found_file%%tilde% state_new_block
#%new_added_string%
%action_text%
COPY_TRANS PLAYER1 5%LNL%%LNL%~
	ACTION_IF ( clear ) BEGIN 
		ACTION_CLEAR_ARRAY STATES_IN_DLG
	END
	ACTION_IF ( FILE_EXISTS_IN_GAME ~%found_file%.dlg~ ) BEGIN
		COPY_EXISTING ~%found_file%.dlg~ ~override~
			READ_LONG 0x08 xstat_num
			READ_LONG 0x0c xstat_off
			READ_LONG 0x10 xresp_num
			READ_LONG 0x14 xresp_off
			READ_LONG 0x28 xaction_off
			PATCH_IF ( xstat_num > 0 ) AND ( detect_state < xstat_num ) BEGIN
				SET offset = xstat_off + detect_state * 0x10
				READ_LONG offset + 0x00 strref
				READ_LONG offset + 0x04 resp_first
				READ_LONG offset + 0x08 resp_num
				SPRINT ~string~ ~%string%
CHAIN
IF %tilde%%tilde% THEN %tilde%%found_file%%tilde% num_%detect_state%
#%strref%
END%LNL%~
				SET resp_all = resp_first + resp_num
				SET insert_terminate = 1
				SET exists_terminate = 0
				SPRINT terminate ~~
				SPRINT response_block ~~
				SPRINT add_new_blocks ~~
				FOR ( i = resp_first ; i < resp_all ; ++i ) BEGIN
					SET offs2 = xresp_off + i * 0x20
					READ_LONG  offs2 + 0x00 flags
					READ_LONG  offs2 + 0x10 xacti_ids
					SPRINT action_text ~~
					SPRINT if_do_text ~~
					LPF GET_BIT INT_VAR number = flags nth_bit = 2 RET act_bit = bit_value END
					PATCH_IF ( act_bit ) BEGIN
							LPF GET_TRIGGER_ACTION_TEXT INT_VAR ta_idx = xacti_ids ta = xaction_off RET zx2_acti = ta_text END
							PATCH_IF ( ~%zx2_acti%~ STR_CMP ~~ ) BEGIN
								SPRINT action_text ~ DO %tilde%%zx2_acti%%tilde% ~
								SPRINT if_do_text ~ IF THEN %tilde%%tilde% ~
							END
					END
					LPF GET_BIT INT_VAR number = flags nth_bit = 3 RET bit_value END
					READ_ASCII offs2 + 0x14 next_dial (8) NULL
					READ_LONG  offs2 + 0x1c next_state
					READ_SLONG offs2 + 0x04 resp_text
					PATCH_IF ( ( bit_value ) AND ( exists_terminate = 0 ) AND ( resp_text < 1 ) ) BEGIN
						PATCH_IF ( act_bit ) BEGIN
							PATCH_IF ( NOT add_empty_block ) AND ( NOT aablock ) BEGIN
								SPRINT add_new_blocks ~%new_blocks%~
								SET aablock = 1
							END
							SPRINT ~terminate~ ~IF %tilde%%tilde% THEN%action_text% EXTERN %tilde%%found_file%%tilde% state_new_block%LNL%%LNL%%add_new_blocks%~
							PATCH_PRINT ~add_empty_block = %add_empty_block%~
						END ELSE BEGIN
							SPRINT ~terminate~ ~%terminate% COPY_TRANS PLAYER1 5%LNL%~
						END					
						SET exists_terminate = 1
					END
					PATCH_IF ( resp_text > 0 ) BEGIN SPRINT ~ttttx~ ~ REPLY #%resp_text%~ END ELSE BEGIN SPRINT ~ttttx~ ~~ END
					PATCH_IF ( ~%found_file%~ STR_EQ ~%next_dial%~ ) BEGIN
						SET insert_terminate = 0
						SPRINT ~response_block_X~ ~IF %tilde%%tilde% THEN%ttttx%%action_text% EXTERN %tilde%%next_dial%%tilde% num_%next_state%%LNL%~
						PATCH_IF ( resp_text > 0 ) BEGIN
							SPRINT ~response_block~ ~%response_block%%response_block_X%~
						END ELSE BEGIN
							SPRINT ~response_block~ ~%response_block_X%~
						END
						SET added = added + 1
						SET EVAL ~new_state_%added%~ = next_state
					END ELSE BEGIN
						PATCH_IF ( bit_value ) AND ( resp_text > 0 ) BEGIN
							SET insert_terminate = 0
							SPRINT ~response_block~ ~%response_block%IF %tilde%%tilde% THEN%ttttx%%action_text% EXTERN %tilde%%found_file%%tilde% state_new_block%LNL%~
							SET addedx = addedx + 1
						END
						ELSE BEGIN
							PATCH_IF ( NOT bit_value ) AND ( resp_text > 0 ) BEGIN
								SET insert_terminate = 0
								SPRINT ~response_block_X~ ~IF %tilde%%tilde% THEN%ttttx%%action_text% EXTERN %tilde%%next_dial%%tilde% %next_state%%LNL%~
								SPRINT ~response_block~ ~%response_block%%response_block_X%~
								SET added = added + 1
								SET EVAL ~new_state_%added%~ = next_state
							END
						END
					END
				END
				PATCH_IF ( insert_terminate ) BEGIN SPRINT ~response_block~ ~%terminate%%response_block%~ END
				SPRINT ~string~ ~%string%%response_block%~
				PATCH_IF ( added > 0 ) BEGIN
					FOR ( i = 1 ; i <= added ; ++i ) BEGIN
						SET hohoho = EVAL ~new_state_%i%~
						SPRINT pipipi ~num_%hohoho%~
						TO_UPPER pipipi
						INNER_ACTION BEGIN
							ACTION_IF ( NOT VARIABLE_IS_SET $STATES_IN_DLG ( ~%pipipi%~ ) ) BEGIN
								LAF GET_EDIT_STATE
									INT_VAR
										detect_state = hohoho
										add_empty_block = 0
										addedx
										clear = 0
										aablock
									STR_VAR
										found_file   = EVAL "%next_dial%"
									RET
										echo_string = string
										addedx
										aablock
									RET_ARRAY
										STATES_IN_DLG
								END
								OUTER_SPRINT ~string~ ~%string%%echo_string%~
								ACTION_DEFINE_ASSOCIATIVE_ARRAY STATES_IN_DLG BEGIN ~%pipipi%~ => ~~ END
							END
						END
					END
				END
			END
			BUT_ONLY
		ACTION_IF ( add_empty_block ) AND ( addedx ) AND ( NOT aablock ) BEGIN
			OUTER_SPRINT ~string~ ~%new_blocks%%string%~
		END
	END
END

DEFINE_PATCH_FUNCTION GET_TRIGGER_ACTION_TEXT
	INT_VAR
		ta_idx = 0
		ta = 0
	RET
		ta_text
BEGIN
	SPRINT ~ta_text~ ~~
	READ_LONG ta + 0x08 * ta_idx + 0x00 ta_off
	READ_LONG ta + 0x08 * ta_idx + 0x04 ta_lng
	READ_ASCII ta_off ta_text ( ta_lng )
END


DEFINE_ACTION_FUNCTION AN_PATCH_P1DIALOG_RESPONSES RET new_dialog RET_ARRAY AN_NPC_DLG NEW_DIALOG_ARRAY BEGIN
	ACTION_CLEAR_ARRAY AN_NPC_DLG
	ACTION_CLEAR_ARRAY NEW_DIALOG_ARRAY
	ACTION_DEFINE_ASSOCIATIVE_ARRAY AN_NPC_DLG BEGIN
		~IMOEN2J~,  ~0~, ~IsValidForPartyDialogue("IMOEN2") Global("AN_Imoen_Spellh","AR1514",0)~,        ~SetGlobal("AN_Imoen_Spellh","AR1514",1)~,     ~1~,   ~6~,   ~49869~, ~~, ~%minus_one%~  => ~IMOEN2~
		~JAHEIRAJ~, ~0~, ~IsValidForPartyDialogue("JAHEIRA") Global("AN_Jaheira_Spellh","AR1514",0)~,     ~SetGlobal("AN_Jaheira_Spellh","AR1514",1)~,   ~432~, ~433~, ~50640~, ~~, ~%minus_one%~  => ~JAHEIRA~
		~VICONIJ~,  ~0~, ~IsValidForPartyDialogue("VICONIA") Global("AN_Viconia_Spellh","AR1514",0)~,     ~SetGlobal("AN_Viconia_Spellh","AR1514",1)~,   ~87~,  ~88~,  ~50642~, ~~, ~%minus_one%~  => ~VICONIA~
		~AERIEJ~,   ~0~, ~IsValidForPartyDialogue("AERIE") Global("AN_Aerie_Spellh","AR1514",0)~,         ~SetGlobal("AN_Aerie_Spellh","AR1514",1)~,     ~116~, ~117~, ~50644~, ~~, ~%minus_one%~  => ~AERIE~
		~ANOMENJ~,  ~0~, ~IsValidForPartyDialogue("ANOMEN") Global("AN_Anomen_Spellh","AR1514",0)~,       ~SetGlobal("AN_Anomen_Spellh","AR1514",1)~,    ~250~, ~251~, ~50646~, ~~, ~%minus_one%~  => ~ANOMEN~
		~EDWINJ~,   ~0~, ~IsValidForPartyDialogue("EDWIN") Global("AN_Edwin_Spellh","AR1514",0)~,         ~SetGlobal("AN_Edwin_Spellh","AR1514",1)~,     ~149~, ~152~, ~57710~, ~~, ~%minus_one%~  => ~EDWIN~
		~VALYGARJ~, ~0~, ~IsValidForPartyDialogue("VALYGAR") Global("AN_Valygar_Spellh","AR1514",0)~,     ~SetGlobal("AN_Valygar_Spellh","AR1514",1)~,   ~103~, ~104~, ~57714~, ~~, ~%minus_one%~  => ~VALYGAR~
		~KELDORJ~,  ~0~, ~IsValidForPartyDialogue("KELDORN") Global("AN_Keldorn_Spellh","AR1514",0)~,     ~SetGlobal("AN_Keldorn_Spellh","AR1514",1)~,   ~243~, ~245~, ~57717~, ~~, ~%minus_one%~  => ~KELDORN~
		~KORGANJ~,  ~0~, ~IsValidForPartyDialogue("KORGAN") Global("AN_Korgan_Spellh","AR1514",0)~,       ~SetGlobal("AN_Korgan_Spellh","AR1514",1)~,    ~177~, ~179~, ~57720~, ~~, ~%minus_one%~  => ~KORGAN~
		~JANJ~,     ~0~, ~IsValidForPartyDialogue("JAN") Global("AN_Jan_Spellh","AR1514",0)~,             ~SetGlobal("AN_Jan_Spellh","AR1514",1)~,       ~178~, ~180~, ~57723~, ~~, ~%minus_one%~  => ~JAN~
		~NALIAJ~,   ~0~, ~IsValidForPartyDialogue("NALIA") Global("AN_Nalia_Spellh","AR1514",0)~,         ~SetGlobal("AN_Nalia_Spellh","AR1514",1)~,     ~308~, ~310~, ~57726~, ~~, ~%minus_one%~  => ~NALIA~
		~MAZZYJ~,   ~0~, ~IsValidForPartyDialogue("MAZZY") Global("AN_Mazzy_Spellh","AR1514",0)~,         ~SetGlobal("AN_Mazzy_Spellh","AR1514",1)~,     ~194~, ~196~, ~57729~, ~~, ~%minus_one%~  => ~MAZZY~
		~HAERDAJ~,  ~0~, ~IsValidForPartyDialogue("HAERDALIS") Global("AN_Haerdalis_Spellh","AR1514",0)~, ~SetGlobal("AN_Haerdalis_Spellh","AR1514",1)~, ~141~, ~145~, ~57734~, ~~, ~%minus_one%~  => ~HAERDALIS~
		~CERNDJ~,   ~0~, ~IsValidForPartyDialogue("CERND") Global("AN_Cernd_Spellh","AR1514",0)~,         ~SetGlobal("AN_Cernd_Spellh","AR1514",1)~,     ~130~, ~132~, ~57739~, ~~, ~%minus_one%~  => ~CERND~
		~MINSCJ~,   ~0~, ~IsValidForPartyDialogue("MINSC") Global("AN_Minsc_Spellh","AR1514",0)~,         ~SetGlobal("AN_Minsc_Spellh","AR1514",1)~,     ~202~, ~203~, ~57741~, ~~, ~%minus_one%~  => ~MINSC~
		~RASAADJ~,  ~1~, ~IsValidForPartyDialogue("RASAAD") Global("AN_Rasaad_Spellh","AR1514",0)~,       ~SetGlobal("AN_Rasaad_Spellh","AR1514",1)~,    ~325~, ~326~, ~98384~, ~~, ~%minus_one%~  => ~RASAAD~
		~DORNJ~,    ~1~, ~IsValidForPartyDialogue("DORN") Global("AN_Dorn_Spellh","AR1514",0)~,           ~SetGlobal("AN_Dorn_Spellh","AR1514",1)~,      ~33~,  ~34~,  ~98529~, ~~, ~%minus_one%~  => ~DORN~
		~HEXXATJ~,  ~1~, ~IsValidForPartyDialogue("HEXXAT") Global("AN_Hexxat_Spellh","AR1514",0)~,       ~SetGlobal("AN_Hexxat_Spellh","AR1514",1)~,    ~287~, ~287~, ~98267~, ~~, ~%minus_one%~  => ~HEXXAT~
		~NEERAJ~,   ~1~, ~IsValidForPartyDialogue("NEERA") Global("AN_Neera_Spellh","AR1514",0)~,         ~SetGlobal("AN_Neera_Spellh","AR1514",1)~,     ~461~, ~465~, ~98462~, ~~, ~%minus_one%~  => ~NEERA~
	END
	
	OUTER_SET resp_cnt = 16
	ACTION_IF EE_GAME BEGIN OUTER_SET resp_cnt = 24 END
	
	OUTER_SPRINT strring ""
	OUTER_SPRINT ~new_text~ ~~
	OUTER_SET new_dialog = 0

	COPY_EXISTING ~Player1.dlg~ ~override~
		READ_LONG 0x08 stat_num
		READ_LONG 0x0c stat_off
		READ_LONG 0x10 resp_num
		READ_LONG 0x14 resp_off
		READ_LONG 0x20 resp_trig_off
		READ_LONG 0x24 resp_trig_num
		READ_LONG 0x28 action_off
		READ_LONG 0x2c action_num
		READ_LONG stat_off + 5 * 0x10 + 0x04 first_resp
		READ_LONG stat_off + 5 * 0x10 + 0x08 numbr_resp
		PATCH_IF ( numbr_resp > resp_cnt ) BEGIN
			FOR ( i = resp_cnt ; i < numbr_resp ; ++i ) BEGIN
				SET offset = resp_off + first_resp * 0x20 + i * 0x20
				READ_BYTE  offset + 0x00 flags
				READ_LONG  offset + 0x0c trig_idx
				READ_LONG  offset + 0x10 acti_ids
				READ_ASCII offset + 0x14 dlgx (8) NULL
				READ_LONG  offset + 0x1c next_stt
				SPRINT ~strring~ ~~
				SPRINT ~new_text~ ~~
				INNER_ACTION BEGIN
					LAF GET_EDIT_STATE
						INT_VAR
							detect_state = next_stt
						STR_VAR
							found_file  = EVAL "%dlgx%"
						RET
							string
					END
					OUTER_SPRINT ~strring~ ~%strring%%LNL%%string%~
				END
				SPRINT zx_trig ~~
				SPRINT zx_acti ~~
				LPF GET_BIT INT_VAR number = flags nth_bit = 1 RET bit_value END
				PATCH_IF ( bit_value ) BEGIN
					LPF GET_TRIGGER_ACTION_TEXT INT_VAR ta_idx = trig_idx ta = resp_trig_off RET zx_trig = ta_text END
				END
				LPF GET_BIT INT_VAR number = flags nth_bit = 2 RET bit_value END
				PATCH_IF ( bit_value ) BEGIN
					LPF GET_TRIGGER_ACTION_TEXT INT_VAR ta_idx = acti_ids ta = action_off RET zx_acti = ta_text END
				END
				SPRINT ~new_text~ ~%new_text%EXTEND_BOTTOM PLAYER1 5
	IF %tilde%%zx_trig%%tilde% THEN DO %tilde%%zx_acti%%tilde% EXTERN %tilde%%dlgx%%tilde% num_%next_stt%
END%LNL%%LNL%~
				SPRINT ~strring~ ~%new_text%%strring%~
				PATCH_IF ( NOT VARIABLE_IS_SET $NEW_DIALOG_ARRAY ( ~%dlgx%~ ) ) BEGIN
					DEFINE_ASSOCIATIVE_ARRAY NEW_DIALOG_ARRAY BEGIN ~%dlgx%~, ~%strring%~ => ~~ END
					SET new_dialog = new_dialog + 1
				END
			END
		END
		BUT_ONLY_IF_IT_CHANGES
END

DEFINE_ACTION_MACRO AN_PLAYER1DLG_PATCH BEGIN
	LAF AN_PATCH_P1DIALOG_RESPONSES RET new_dialog RET_ARRAY AN_NPC_DLG NEW_DIALOG_ARRAY END
<<<<<<<< ddd1.d
REPLACE PLAYER1
	IF ~~ THEN BEGIN 5
	SAY #49604
		IF ~~ THEN EXIT
	END
END
>>>>>>>>
	COMPILE ~ddd1.d~
<<<<<<<< ddd2.d
REPLACE ~%d_var%~
	IF ~~ THEN BEGIN %d_var_5%
	SAY #%d_var_6%
		COPY_TRANS Player1 5
	END
END

EXTEND_BOTTOM PLAYER1 5
	IF ~%d_var_2%~ THEN DO ~%d_var_3%~ EXTERN ~%d_var%~ %d_var_4%
END
>>>>>>>>
	ACTION_PHP_EACH AN_NPC_DLG AS d_var => _ BEGIN
		ACTION_IF ( EE_GAME ) OR ( ~%d_var_1%~ = 0 ) BEGIN
			SILENT
				COMPILE ~ddd2.d~ EVALUATE_BUFFER
			VERBOSE
		END
	END
<<<<<<<< ddd3.d
%d_var_1%
>>>>>>>>
	ACTION_IF ( new_dialog > 0 ) BEGIN
		ACTION_PHP_EACH NEW_DIALOG_ARRAY AS d_var => _ BEGIN
			PRINT ~COMPILE  %d_var%.d~
			SILENT
				COMPILE ~ddd3.d~ EVALUATE_BUFFER
			VERBOSE
		END
	END
END